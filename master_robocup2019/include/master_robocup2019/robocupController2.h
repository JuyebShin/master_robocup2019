// Generated by gencpp from file gamecontroller/robocupController2.msg
// DO NOT EDIT!


#ifndef GAMECONTROLLER_MESSAGE_ROBOCUPCONTROLLER2_H
#define GAMECONTROLLER_MESSAGE_ROBOCUPCONTROLLER2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gamecontroller
{
template <class ContainerAllocator>
struct robocupController2_
{
  typedef robocupController2_<ContainerAllocator> Type;

  robocupController2_()
    : state(0)
    , readyTime(0)
    , penalty(0)
    , firstHalf(0)
    , kickoffTeam(0)  {
    }
  robocupController2_(const ContainerAllocator& _alloc)
    : state(0)
    , readyTime(0)
    , penalty(0)
    , firstHalf(0)
    , kickoffTeam(0)  {
  (void)_alloc;
    }



   typedef int64_t _state_type;
  _state_type state;

   typedef int64_t _readyTime_type;
  _readyTime_type readyTime;

   typedef int64_t _penalty_type;
  _penalty_type penalty;

   typedef int64_t _firstHalf_type;
  _firstHalf_type firstHalf;

   typedef int64_t _kickoffTeam_type;
  _kickoffTeam_type kickoffTeam;





  typedef boost::shared_ptr< ::gamecontroller::robocupController2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gamecontroller::robocupController2_<ContainerAllocator> const> ConstPtr;

}; // struct robocupController2_

typedef ::gamecontroller::robocupController2_<std::allocator<void> > robocupController2;

typedef boost::shared_ptr< ::gamecontroller::robocupController2 > robocupController2Ptr;
typedef boost::shared_ptr< ::gamecontroller::robocupController2 const> robocupController2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gamecontroller::robocupController2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gamecontroller::robocupController2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gamecontroller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'gamecontroller': ['/home/robit/catkin_ws/src/gamecontroller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gamecontroller::robocupController2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gamecontroller::robocupController2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gamecontroller::robocupController2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gamecontroller::robocupController2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gamecontroller::robocupController2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gamecontroller::robocupController2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gamecontroller::robocupController2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aeae444f0528478e429bf965779fa25";
  }

  static const char* value(const ::gamecontroller::robocupController2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aeae444f0528478ULL;
  static const uint64_t static_value2 = 0xe429bf965779fa25ULL;
};

template<class ContainerAllocator>
struct DataType< ::gamecontroller::robocupController2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gamecontroller/robocupController2";
  }

  static const char* value(const ::gamecontroller::robocupController2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gamecontroller::robocupController2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 state\n\
int64 readyTime\n\
int64 penalty\n\
int64 firstHalf\n\
int64 kickoffTeam\n\
";
  }

  static const char* value(const ::gamecontroller::robocupController2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gamecontroller::robocupController2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.readyTime);
      stream.next(m.penalty);
      stream.next(m.firstHalf);
      stream.next(m.kickoffTeam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robocupController2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gamecontroller::robocupController2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gamecontroller::robocupController2_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "readyTime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.readyTime);
    s << indent << "penalty: ";
    Printer<int64_t>::stream(s, indent + "  ", v.penalty);
    s << indent << "firstHalf: ";
    Printer<int64_t>::stream(s, indent + "  ", v.firstHalf);
    s << indent << "kickoffTeam: ";
    Printer<int64_t>::stream(s, indent + "  ", v.kickoffTeam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAMECONTROLLER_MESSAGE_ROBOCUPCONTROLLER2_H
