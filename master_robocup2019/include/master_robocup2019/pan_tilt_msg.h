// Generated by gencpp from file pan_tilt/pan_tilt_msg.msg
// DO NOT EDIT!


#ifndef PAN_TILT_MESSAGE_PAN_TILT_MSG_H
#define PAN_TILT_MESSAGE_PAN_TILT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pan_tilt
{
template <class ContainerAllocator>
struct pan_tilt_msg_
{
  typedef pan_tilt_msg_<ContainerAllocator> Type;

  pan_tilt_msg_()
    : waist_flag(0)
    , Angle_Yaw(0.0)
    , Angle_Pitch(0.0)  {
    }
  pan_tilt_msg_(const ContainerAllocator& _alloc)
    : waist_flag(0)
    , Angle_Yaw(0.0)
    , Angle_Pitch(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _waist_flag_type;
  _waist_flag_type waist_flag;

   typedef double _Angle_Yaw_type;
  _Angle_Yaw_type Angle_Yaw;

   typedef double _Angle_Pitch_type;
  _Angle_Pitch_type Angle_Pitch;




  typedef boost::shared_ptr< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> const> ConstPtr;

}; // struct pan_tilt_msg_

typedef ::pan_tilt::pan_tilt_msg_<std::allocator<void> > pan_tilt_msg;

typedef boost::shared_ptr< ::pan_tilt::pan_tilt_msg > pan_tilt_msgPtr;
typedef boost::shared_ptr< ::pan_tilt::pan_tilt_msg const> pan_tilt_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pan_tilt::pan_tilt_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pan_tilt

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'pan_tilt': ['/home/robit/catkin_ws/src/pan_tilt/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "611b91cd650b11bf3bb556113e5f1029";
  }

  static const char* value(const ::pan_tilt::pan_tilt_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x611b91cd650b11bfULL;
  static const uint64_t static_value2 = 0x3bb556113e5f1029ULL;
};

template<class ContainerAllocator>
struct DataType< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pan_tilt/pan_tilt_msg";
  }

  static const char* value(const ::pan_tilt::pan_tilt_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 waist_flag\n\
\n\
float64 Angle_Yaw\n\
float64 Angle_Pitch\n\
";
  }

  static const char* value(const ::pan_tilt::pan_tilt_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waist_flag);
      stream.next(m.Angle_Yaw);
      stream.next(m.Angle_Pitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pan_tilt_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pan_tilt::pan_tilt_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pan_tilt::pan_tilt_msg_<ContainerAllocator>& v)
  {
    s << indent << "waist_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.waist_flag);
    s << indent << "Angle_Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Angle_Yaw);
    s << indent << "Angle_Pitch: ";
    Printer<double>::stream(s, indent + "  ", v.Angle_Pitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAN_TILT_MESSAGE_PAN_TILT_MSG_H
