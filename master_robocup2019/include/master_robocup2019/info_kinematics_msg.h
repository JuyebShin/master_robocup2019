// Generated by gencpp from file inverse_kinematics/info_kinematics_msg.msg
// DO NOT EDIT!


#ifndef INVERSE_KINEMATICS_MESSAGE_INFO_KINEMATICS_MSG_H
#define INVERSE_KINEMATICS_MESSAGE_INFO_KINEMATICS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inverse_kinematics
{
template <class ContainerAllocator>
struct info_kinematics_msg_
{
  typedef info_kinematics_msg_<ContainerAllocator> Type;

  info_kinematics_msg_()
    : X_length(0.0)
    , Y_length(0.0)
    , Z_length(0.0)
    , R_yaw(0.0)
    , L_yaw(0.0)
    , Leg_angle(0.0)
    , PA(0.0)
    , RA(0.0)
    , flag(0.0)
    , Using_Motor_id()
    , KM_flag(0)
    , KM_flag2(0)
    , Side_flag(0)
    , Step_counter(0)  {
    }
  info_kinematics_msg_(const ContainerAllocator& _alloc)
    : X_length(0.0)
    , Y_length(0.0)
    , Z_length(0.0)
    , R_yaw(0.0)
    , L_yaw(0.0)
    , Leg_angle(0.0)
    , PA(0.0)
    , RA(0.0)
    , flag(0.0)
    , Using_Motor_id(_alloc)
    , KM_flag(0)
    , KM_flag2(0)
    , Side_flag(0)
    , Step_counter(0)  {
  (void)_alloc;
    }



   typedef double _X_length_type;
  _X_length_type X_length;

   typedef double _Y_length_type;
  _Y_length_type Y_length;

   typedef double _Z_length_type;
  _Z_length_type Z_length;

   typedef double _R_yaw_type;
  _R_yaw_type R_yaw;

   typedef double _L_yaw_type;
  _L_yaw_type L_yaw;

   typedef double _Leg_angle_type;
  _Leg_angle_type Leg_angle;

   typedef double _PA_type;
  _PA_type PA;

   typedef double _RA_type;
  _RA_type RA;

   typedef double _flag_type;
  _flag_type flag;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Using_Motor_id_type;
  _Using_Motor_id_type Using_Motor_id;

   typedef int32_t _KM_flag_type;
  _KM_flag_type KM_flag;

   typedef int32_t _KM_flag2_type;
  _KM_flag2_type KM_flag2;

   typedef int32_t _Side_flag_type;
  _Side_flag_type Side_flag;

   typedef int32_t _Step_counter_type;
  _Step_counter_type Step_counter;




  typedef boost::shared_ptr< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> const> ConstPtr;

}; // struct info_kinematics_msg_

typedef ::inverse_kinematics::info_kinematics_msg_<std::allocator<void> > info_kinematics_msg;

typedef boost::shared_ptr< ::inverse_kinematics::info_kinematics_msg > info_kinematics_msgPtr;
typedef boost::shared_ptr< ::inverse_kinematics::info_kinematics_msg const> info_kinematics_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inverse_kinematics

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'inverse_kinematics': ['/home/odroid/catkin_ws/src/inverse_kinematics/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceb8186e788911a1f7a615bbc1bcad32";
  }

  static const char* value(const ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceb8186e788911a1ULL;
  static const uint64_t static_value2 = 0xf7a615bbc1bcad32ULL;
};

template<class ContainerAllocator>
struct DataType< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inverse_kinematics/info_kinematics_msg";
  }

  static const char* value(const ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 X_length\n\
float64 Y_length\n\
float64 Z_length\n\
float64 R_yaw\n\
float64 L_yaw\n\
float64 Leg_angle\n\
float64 PA\n\
float64 RA\n\
float64 flag\n\
int32[] Using_Motor_id\n\
int32 KM_flag\n\
int32 KM_flag2\n\
int32 Side_flag\n\
int32 Step_counter\n\
";
  }

  static const char* value(const ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X_length);
      stream.next(m.Y_length);
      stream.next(m.Z_length);
      stream.next(m.R_yaw);
      stream.next(m.L_yaw);
      stream.next(m.Leg_angle);
      stream.next(m.PA);
      stream.next(m.RA);
      stream.next(m.flag);
      stream.next(m.Using_Motor_id);
      stream.next(m.KM_flag);
      stream.next(m.KM_flag2);
      stream.next(m.Side_flag);
      stream.next(m.Step_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct info_kinematics_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inverse_kinematics::info_kinematics_msg_<ContainerAllocator>& v)
  {
    s << indent << "X_length: ";
    Printer<double>::stream(s, indent + "  ", v.X_length);
    s << indent << "Y_length: ";
    Printer<double>::stream(s, indent + "  ", v.Y_length);
    s << indent << "Z_length: ";
    Printer<double>::stream(s, indent + "  ", v.Z_length);
    s << indent << "R_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.R_yaw);
    s << indent << "L_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.L_yaw);
    s << indent << "Leg_angle: ";
    Printer<double>::stream(s, indent + "  ", v.Leg_angle);
    s << indent << "PA: ";
    Printer<double>::stream(s, indent + "  ", v.PA);
    s << indent << "RA: ";
    Printer<double>::stream(s, indent + "  ", v.RA);
    s << indent << "flag: ";
    Printer<double>::stream(s, indent + "  ", v.flag);
    s << indent << "Using_Motor_id[]" << std::endl;
    for (size_t i = 0; i < v.Using_Motor_id.size(); ++i)
    {
      s << indent << "  Using_Motor_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Using_Motor_id[i]);
    }
    s << indent << "KM_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KM_flag);
    s << indent << "KM_flag2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KM_flag2);
    s << indent << "Side_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Side_flag);
    s << indent << "Step_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Step_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INVERSE_KINEMATICS_MESSAGE_INFO_KINEMATICS_MSG_H
